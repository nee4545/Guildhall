#include "ConstantBuffers.hlsl"

static float3 POSITIONS[ 3 ] =
{
    float3( -1.0f , -1.0f , 0.0f ) ,
   float3( 3.0f , -1.0f , 0.0f ) ,
   float3( -1.0f , 3.0f , 0.0f )
};

//--------------------------------------------------------------------------------------

static float2 UVS[ 3 ] =
{
    float2( 0.0f , 1.0f ) ,
   float2( 2.0f , 1.0f ) ,
   float2( 0.0f , -1.0f )
};

//--------------------------------------------------------------------------------------

static float Offsets[ 11 ] =
{
   -5 ,
  -4 ,
  -3 ,
  -2 ,
  -1 ,
  0 ,
  1 ,
  2 ,
  3 ,
  4 ,
  5 ,
};

static float Weights[ 11 ][ 11 ] =
{
{0.0071 , 0.007427 , 0.007691 , 0.007886 , 0.008005 , 0.008045 , 0.008005 , 0.007886 , 0.007691 , 0.007427 , 0.0071         },
{0.007427 , 0.007768 , 0.008045 , 0.008248 , 0.008373 , 0.008415 , 0.008373 , 0.008248 , 0.008045 , 0.007768 , 0.007427     },
{0.007691 , 0.008045 , 0.008331 , 0.008542 , 0.008671 , 0.008714 , 0.008671 , 0.008542 , 0.008331 , 0.008045 , 0.007691     },
{0.007886 , 0.008248 , 0.008542 , 0.008758 , 0.00889 , 0.008935 , 0.00889 , 0.008758 , 0.008542 , 0.008248 , 0.007886       },
{0.008005 , 0.008373 , 0.008671 , 0.00889 , 0.009025 , 0.00907 , 0.009025 , 0.00889 , 0.008671 , 0.008373 , 0.008005        },
{0.008045 , 0.008415 , 0.008714 , 0.008935 , 0.00907 , 0.009115 , 0.00907 , 0.008935 , 0.008714 , 0.008415 , 0.008045       },
{0.008005 , 0.008373 , 0.008671 , 0.00889 , 0.009025 , 0.00907 , 0.009025 , 0.00889 , 0.008671 , 0.008373 , 0.008005        },
{0.007886 , 0.008248 , 0.008542 , 0.008758 , 0.00889 , 0.008935 , 0.00889 , 0.008758 , 0.008542 , 0.008248 , 0.007886       },
{0.007691 , 0.008045 , 0.008331 , 0.008542 , 0.008671 , 0.008714 , 0.008671 , 0.008542 , 0.008331 , 0.008045 , 0.007691     },
{0.007427 , 0.007768 , 0.008045 , 0.008248 , 0.008373 , 0.008415 , 0.008373 , 0.008248 , 0.008045 , 0.007768 , 0.007427     },
{0.0071 , 0.007427 , 0.007691 , 0.007886 , 0.008005 , 0.008045 , 0.008005 , 0.007886 , 0.007691 , 0.007427 , 0.0071         },

};


struct vs_input_t
{
    uint vidx : SV_VERTEXID; 
};

//--------------------------------------------------------------------------------------

struct VertexToFragment_t
{
    float4 position : SV_POSITION;
    float2 uv : UV;
};


VertexToFragment_t VertexFunction( vs_input_t input )
{
    VertexToFragment_t v2f = ( VertexToFragment_t ) 0;
    
    v2f.position = float4( POSITIONS[ input.vidx ] , 1.0f );
    v2f.uv = UVS[ input.vidx ];
   
    return v2f;
}

Texture2D<float4> blurDiffuse : register( t8 );

float4 FragmentFunction( VertexToFragment_t input ) : SV_Target0
{

//--------------------------------------------------------------------------------------
//              SAMPLE THE TEXTURES
//--------------------------------------------------------------------------------------    
  
    float2 textureDimensions;
    blurDiffuse.GetDimensions( textureDimensions.x , textureDimensions.y );
    
    float PixelWidth = 1.0f / textureDimensions.x;
    float PixelHeight = 1.0f / textureDimensions.y;

    float4 Color = { 0 , 0 , 0 , 0 };

    float2 Blur;
        
    for( int x = 0 ; x < 11 ; x++ )
    {
        Blur.x = input.uv.x + Offsets[ x ] * PixelWidth;
        for( int y = 0 ; y < 11 ; y++ )
        {
            Blur.y = input.uv.y + Offsets[ y ] * PixelHeight;
            Color += blurDiffuse.Sample( sSampler , Blur ) * Weights[ x ][ y ];
        }
    }
     
    return Color;
}

//--------------------------------------------------------------------------------------